We will create a continuous delivery pipeline for a simple web application. You will first use a version control system to store your source code. Then, you will learn how to create a continuous delivery pipeline that will automatically deploy your web application whenever your source code is updated.

Module 1: Set Up Git Repo :

Key concepts

Version control—A system for storing source code and tracking any changes to it. Changes are stored as versions, so a developer can easily compare versions or choose to revert to an older version.

Git—An open-source version control tool for managing changes to source code.

Git repository (repo)—All the files and directories that will be tracked by the version control system, including metadata. Each user will interact with a complete copy locally and push files to the hosted version to share changes.

Git commit—The method to add changes to a Git repository.

Pushing to a repository—Copying any changes stored via a commit from a local repository to a hosted one.

Forking a repository—Creating a copy of an existing repository.


Implementation:

clone repo from github from github (venkatasubbareddy66.github.com)

or search for this      aws-elastic-beanstalk-express-js-sample 

change 5th line in your app.js file , apply any text other than hello world 


Module 2: Deploy Web App 

In this module, you will create and deploy a web application using AWS Elastic Beanstalk

We will use the AWS Elastic Beanstalk console to create and deploy a web application. AWS Elastic Beanstalk is a compute service that makes it easy to deploy and manage applications on AWS without having to worry about the infrastructure that runs them. You will use the Create web app wizard to create an application and launch an environment with the AWS resources needed to run your application. In subsequent modules, you will be using this environment and your continuous delivery pipeline to deploy the Hello World! web app created in Module 1.

Key concepts

AWS Elastic Beanstalk - A service that makes it easy to deploy your application on AWS. You simply upload your code and Elastic Beanstalk deploys, manages, and scales your application.

Environment - Collection of AWS resources provisioned by Elastic Beanstalk that are used to run your application.

EC2 instance - Virtual server in the cloud. Elastic Beanstalk will provision one or more Amazon EC2 instances when creating an environment.

Web server - Software that uses the HTTP protocol to serve content over the Internet. It is used to store, process, and deliver web pages.

Platform—Combination of operating system, programming language runtime, web server, application server, and Elastic Beanstalk components. Your application runs using the components provided by a platform.


Implementation :

In a new browser tab, open the AWS Elastic Beanstalk console.

Choose the orange Create Application button.

Choose Web server environment under the Configure environment heading.

In the text box under the heading Application name, enter DevOpsGettingStarted.

In the Platform dropdown menu, under the Platform heading, select Node.js . Platform branch and Platform version will automatically populate with default selections.

Confirm that the radio button next to Sample application under the Application code heading is selected.

Confirm that the radio button next to Single instance (free tier eligible) under the Presets heading is selected.

Select Next.

On the Configure service access screen, choose Use an existing service role for Service Role.

 For EC2 instance profile dropdown list, the values displayed in this dropdown list may vary, depending on whether you account has previously created a new environment.

 Choose one of the following, based on the values displayed in your list.

-- If aws-elasticbeanstalk-ec2-role displays in the dropdown list, select it from the EC2 instance profile dropdown list.
-- If another value displays in the list, and it’s the default EC2 instance profile intended for your environments, select it from the EC2 instance profile dropdown list.
-- If the EC2 instance profile dropdown list doesn't list any values to choose from, expand the procedure that follows, Create IAM Role for EC2 instance profile.


Complete the steps in Create IAM Role for EC2 instance profile to create an IAM Role that you can subsequently select for the EC2 instance profile. Then, return back to this step. 

Now that you've created an IAM Role, and refreshed the list, it displays as a choice in the dropdown list. Select the IAM Role you just created from the EC2 instance profile dropdown list.


Choose Skip to Review on the Configure service access page.


now open the link of elasticbeanstalk , it will atke 3-4 min to generate 


We have created an AWS Elastic Beanstalk environment and sample application. We will be using this environment and our continuous delivery pipeline to deploy the Hello World! web app we created in the previous module.


Module 3: Create Build Project

you will configure and execute the application build process using AWS CodeBuild

Key concepts


Build process—Process that converts source code files into an executable software artifact. It may include the following steps: compiling source code, running tests, and packaging software for deployment.

Continuous integration—Software development practice of regularly pushing changes to a hosted repository, after which automated builds and tests are run.

Build environment—Represents a combination of the operating system, programming language runtime, and tools that CodeBuild uses to run a build.

Buildspec—Collection of build commands and related settings, in YAML format, that CodeBuild uses to run a build.

Build Project—Includes information about how to run a build, including where to get the source code, which build environment to use, which build commands to run, and where to store the build output.

OAuth—Open protocol for secure authorization. OAuth enables you to connect your GitHub account to third-party applications, including AWS CodeBuild.


Implementation

Configure the AWS CodeBuild Project

In a new browser tab, open the AWS CodeBuild console.
Choose the orange Create project button.
In the Project name field, enter Build-DevOpsGettingStarted.
Select GitHub from the Source provider dropdown menu.
Confirm that the Connect using OAuth radio button is selected.
Choose the white Connect to GitHub button. A new browser tab will open asking you to give AWS CodeBuild access to your GitHub repo.
Choose the green Authorize aws-codesuite button.
Enter your GitHub password.
Choose the orange Confirm button.
Select Repository in my GitHub account.
Enter aws-elastic-beanstalk-express-js-sample in the search field.
Select the repo you forked in Module 1. After selecting your repo, your screen should look like this:


Create a Buildspec file for project 

Select Insert build commands.
Choose Switch to editor.
Replace the Buildspec in the editor with the code below:

version: 0.2
phases:
    build:
        commands:
            - npm i --save
artifacts:
    files:
        - '**/*'


Choose the orange Create build project button. You should now see a dashboard for your project.



Test the CodeBuild project

Choose the orange Start build button. This will load a page to configure the build process.
Confirm that the loaded page references the correct GitHub repo.
Choose the orange Start build button.
Wait for the build to complete. As you are waiting you should see a green bar at the top of the page with the message Build started, the progress for your build under Build log, and, after a couple minutes, a green checkmark and a Succeeded message confirming the build worked.


Module 4: Create Delivery Pipeline

you will use AWS CodePipeline to set up a continuous delivery pipeline with source, build, and deploy stages


Key concepts

Continuous delivery—Software development practice that allows developers to release software more quickly by automating the build, test, and deploy processes.

Pipeline—Workflow model that describes how software changes go through the release process. Each pipeline is made up of a series of stages.

Stage—Logical division of a pipeline, where actions are performed. A stage might be a build stage, where the source code is built and tests are run. It can also be a deployment stage, where code is deployed to runtime environments.

Action—Set of tasks performed in a stage of the pipeline. For example, a source action can start a pipeline when source code is updated, and a deploy action can deploy code to a compute service like AWS Elastic Beanstalk.


Implementation : 

Create a New Pipeline

In a browser window, open the AWS CodePipeline console.
Choose the orange Create pipeline button. A new screen will open up so you can set up the pipeline.
In the Pipeline name field, enter Pipeline-DevOpsGettingStarted.
Confirm that New service role is selected.
Choose the orange Next button.

Configure the source Stage


Select GitHub version 1 from the Source provider dropdown menu.
Choose the white Connect to GitHub button. A new browser tab will open asking you to give AWS CodePipeline access to your GitHub repo.
Choose the green Authorize aws-codesuite button. Next, you will see a green box with the message You have successfully configured the action with the provider.
From the Repository dropdown, select the repo you created in Module 1.
Select main from the branch dropdown menu.
Confirm that GitHub webhooks is selected.
Choose the orange Next button.


Configure the BuildStage

From the Build provider dropdown menu, select AWS CodeBuild.
Under Region confirm that the US West (Oregon) (ur region) Region is selected.
Select Build-DevOpsGettingStarted under Project name.
Choose the orange Next button.

Configure the DeployStage

Select AWS Elastic Beanstalk from the Deploy provider dropdown menu.
Under Region, confirm that the US West (Oregon) Region is selected.
Select the field under Application name and confirm you can see the app DevOpsGettingStarted created in Module 2.
Select DevOpsGettingStarted-env from the Environment name textbox.
Choose the orange Next button. You will now see a page where you can review the pipeline configuration.
Choose the orange Create pipeline button.

watch the first pipeline execution 

While watching the pipeline execution, you will see a page with a green bar at the top. This page shows all the steps defined for the pipeline and, after a few minutes, each will change from blue to green.


Once the Deploy stage has switched to green and it says Succeeded, choose AWS Elastic Beanstalk. A new tab listing your AWS Elastic Beanstalk environments will open.

Select the URL in the Devopsgettingstarted-env row. You should see a webpage with a white background and the text you included in your GitHub commit in Module 1.


Module 5: Finalize Pipeline and Test

You will add a review stage to your countinuous delivery pipeline using AWS CodePipeline

Key concepts

Approval action—Type of pipeline action that stops the pipeline execution until someone approves or rejects it.

Pipeline execution—Set of changes, such as a merged commit, released by a pipeline. Pipeline executions traverse the pipeline stages in order. Each pipeline stage can only process one execution at a time. To do this, a stage is locked while it processes an execution.

Failed execution—If an execution fails, it stops and does not completely traverse the pipeline. The pipeline status changes to Failed and the stage that was processing the execution is unlocked. A failed execution can be retried or replaced by a more recent execution.
 

 Implementation


 Create Review Stage in Pipeline 

 Open the AWS CodePipeline console.
You should see the pipeline we created in Module 4, which was called Pipeline-DevOpsGettingStarted. Select this pipeline.
Choose the white Edit button near the top of the page.
Choose the white Add stage button between the Build and Deploy stages.
In the Stage name field, enter Review.
Choose the orange Add stage button.
In the Review stage, choose the white Add action group button.
Under Action name, enter Manual_Review.
From the Action provider dropdown, select Manual approval.
Confirm that the optional fields have been left blank.
Choose the orange Done button.
Choose the orange Save button at the top of the page.
Choose the orange Save button to confirm the changes. You will now see your pipeline with four stages: Source, Build, Review, and Deploy.


Push a new commit to your Repo

n your favorite code editor, open the app.js file from Module 1.
Change the message in Line 5.
Save the file.
Open your preferred Git client.
Navigate to the folder created in Module 1.
Commit the change with the following commands:

git add app.js
git commit -m "Full pipeline test"
git push


Monitor the pipeline and Manually apparove the change 

Navigate to the AWS CodePipeline console.
Select the pipeline named Pipeline-DevOpsGettingStarted. You should see the Source and Build stages switch from blue to green.
When the Review stage switches to blue, choose the white Review button.
Write an approval comment in the Comments textbox.
Choose the orange Approve button.
Wait for the Review and Deploy stages to switch to green.
Select the AWS Elastic Beanstalk link in the Deploy stage. A new tab listing your Elastic Beanstalk environments will open.
Select the URL in the Devopsgettingstarted-env row. You should see a webpage with a white background and the text you had in your most recent GitHub commit.
Congratulations! You have a fully functional continuous delivery pipeline hosted on AWS.




